package main

import (
	"log"
	"os"

	"github.com/gofiber/template/html/v2"
	_ "github.com/joho/godotenv/autoload"
	"github.com/momokii/go-llmbridge/pkg/openai"
	_ "github.com/momokii/go-wa-notifier/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/helmet"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/momokii/go-wa-notifier/internal/handlers"
)

// @title           Go Whatsapp Notifier API
// @version         1.0
// @description     -.
// @termsOfService  http://swagger.io/terms/

// @contact.name   Kelana Chandra Helyandika
// @contact.url    https://kelanach.xyz

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:3004
// @BasePath  /api
// @schemes   http

// @securityDefinitions.basic  BasicAuth

// @externalDocs.description  OpenAPI
// @externalDocs.url          https://swagger.io/resources/open-api/
func main() {

	DEVMODE := os.Getenv("APP_ENV")
	PORT := os.Getenv("PORT")

	// openai client
	openaiClient, err := openai.New(
		os.Getenv("OPENAI_API_KEY"),
		"",
		"",
		openai.WithModel(os.Getenv("OPENAI_MODEL_NAME")),
	)
	if err != nil {
		log.Println("Error creating OpenAI client: ", err)
		return

	} else {
		log.Println("OpenAI client created")
	}

	news_api_key := os.Getenv("NEWS_API_KEY")
	if news_api_key == "" {
		panic("API key is required")
	}

	openweather_api_key := os.Getenv("OPEN_WEATHER_API_KEY")
	if openweather_api_key == "" {
		panic("API key is required")
	}

	// initiate handler
	whatsAppHandler, err := handlers.NewWhatsappHandler(news_api_key, openweather_api_key, openaiClient)
	if err != nil {
		panic(err.Error())
	}

	// FIBER app initiate
	engine := html.New("./web", ".html")
	app := fiber.New(fiber.Config{
		Views: engine,
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}

			return c.Status(code).Render("error", fiber.Map{
				"Code":    code,
				"Message": err.Error(),
			})
		},
	})

	api := app.Group("/api")

	app.Use(cors.New())
	app.Use(logger.New())
	app.Use(helmet.New())
	if DEVMODE == "production" {
		app.Use(recover.New())
	}
	app.Static("/web", "./web")

	api.Get("/wa/status", whatsAppHandler.WAStatus)
	api.Post("/wa/news", whatsAppHandler.SendNewsAPIWhatsapp)
	api.Post("/wa/messages", whatsAppHandler.SendMessages)
	api.Post("/wa/weathers", whatsAppHandler.SendWeatherAPIWhatsapp)
	api.Post("/wa/logout", whatsAppHandler.WhatsAppLogout)

	app.Get("/", func(c *fiber.Ctx) error {
		return c.Render("status-wa", fiber.Map{
			"Title": "Go Whatsapp Notifier",
		})
	})

	if DEVMODE != "development" && DEVMODE != "production" {
		log.Println("APP_ENV not set")
	} else {
		log.Println("Running on: " + DEVMODE)
		if err := app.Listen(":" + PORT); err != nil {
			log.Println("Error running Server: ", err)
		}
	}
}
